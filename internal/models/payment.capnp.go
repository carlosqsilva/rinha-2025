// Code generated by capnpc-go. DO NOT EDIT.

package models

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type PaymentData capnp.Struct

// PaymentData_TypeID is the unique identifier for the type PaymentData.
const PaymentData_TypeID = 0xe14c863e60a34b87

func NewPaymentData(s *capnp.Segment) (PaymentData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return PaymentData(st), err
}

func NewRootPaymentData(s *capnp.Segment) (PaymentData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return PaymentData(st), err
}

func ReadRootPaymentData(msg *capnp.Message) (PaymentData, error) {
	root, err := msg.Root()
	return PaymentData(root.Struct()), err
}

func (s PaymentData) String() string {
	str, _ := text.Marshal(0xe14c863e60a34b87, capnp.Struct(s))
	return str
}

func (s PaymentData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PaymentData) DecodeFromPtr(p capnp.Ptr) PaymentData {
	return PaymentData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PaymentData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PaymentData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PaymentData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PaymentData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PaymentData) CorrelationId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PaymentData) HasCorrelationId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PaymentData) CorrelationIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PaymentData) SetCorrelationId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s PaymentData) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s PaymentData) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s PaymentData) RequestedAt() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s PaymentData) HasRequestedAt() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PaymentData) RequestedAtBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s PaymentData) SetRequestedAt(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s PaymentData) Processor() uint8 {
	return capnp.Struct(s).Uint8(8)
}

func (s PaymentData) SetProcessor(v uint8) {
	capnp.Struct(s).SetUint8(8, v)
}

// PaymentData_List is a list of PaymentData.
type PaymentData_List = capnp.StructList[PaymentData]

// NewPaymentData creates a new list of PaymentData.
func NewPaymentData_List(s *capnp.Segment, sz int32) (PaymentData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[PaymentData](l), err
}

// PaymentData_Future is a wrapper for a PaymentData promised by a client call.
type PaymentData_Future struct{ *capnp.Future }

func (f PaymentData_Future) Struct() (PaymentData, error) {
	p, err := f.Future.Ptr()
	return PaymentData(p.Struct()), err
}

const schema_cfa902c41d794181 = "x\xda4\xca1J\x03A\x1c\x85\xf1\xf7\xfe\xb3I\x84" +
	"D\xc8\xc0\xb6\xea\x094\xa4M\xa1\x06lD\x8bLN" +
	"\x901;E`wg\x9d\x9d\x05\xd3)\x88\x1e\xc4\xca" +
	"S\xd8hmeai\xe51FD,\xbf\x8f\xdf\xf8" +
	"\xfe4\x9b\xee\xbe\x10b\xf2^?=^<\xad\x8e\x1f" +
	".\xbf`\xf6)\xe9n\xbe\xdd{\x95\xe7w\xf4d\x00" +
	"L\xdf\x96\xd4\x9f\x03@\x7f|\xe30m\xea\xe8Bm" +
	"\xcblR\xf9\xc2\x95\xed\xa4\xb1\xdb\xca\xd5\xf1hm\x9b" +
	"\xba\x99-\xfe\xea\xccF\xda\x05i\xc6*\x032\x02\xda" +
	"\x06\xc0\xac\x14M)$s\xfe\xbe\xcd\x0c0\x85\xa2i" +
	"\x84Z\x98S\x00]]\x01\xa6T47B\xadvr" +
	"*RwK\xc0DEs+Lk\x1f\x82+m\xc4" +
	"\xc1\xc6\xd7\xe7\x05G\x10\x8e\xc0\x13[\xf9\xae\x8e\x1cB" +
	"8\x04Sp\xd7\x9dk\xa3\xc3\xa0\x98\xc7\x7f\x94\x9a\xe0" +
	"\xd7\xaem=\x18\xd8\x87\xb0\x0f\xfe\x04\x00\x00\xff\xff\xfc" +
	"\xed@!"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_cfa902c41d794181,
		Nodes: []uint64{
			0xe14c863e60a34b87,
		},
		Compressed: true,
	})
}
